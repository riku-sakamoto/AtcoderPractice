{
	// Place your AtcoderPractices workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"CppTemplate": {
		"body": [
			"#ifdef __LOCAL",
			"#define _GLIBCXX_DEBUG",
			"#endif",
			"#include <bits/stdc++.h>",
			"#include <vector>",
			"#include <queue>",
			"#include <set>",
			"#include <iostream>",
			"#include <iomanip>",
			"using namespace std;",
			"typedef long long LL;",
			"#define REP(i,n) for(int i=0;i<(n);i++)",
			"#define REPREV(i,n) for(int i=(n-1);i>=(0);i--)",
			"#define FOR(i,a,b) for(int i=(a);i<(b);++i)",
			"#define ALL(x) x.begin(),x.end()",
			"template<typename T1,typename T2> inline void chmin(T1 &a,T2 b){if(a>b) a=b;}",
			"template<typename T1,typename T2> inline void chmax(T1 &a,T2 b){if(a<b) a=b;}",
			"",
			"int main(){",
			"    return 0;",
			"}"
		]
	}
}